df.tweets <- twListToDF(tweets)
dt.tweets <- as.data.table(df.tweets)
}
df.tweets
#Teewts parse functions
if(result != 'ERROR'){
#Teewts parse functions
tweet_get_latitude <- function(x){
aux1 <- unlist(strsplit(x$urls$expanded_url,'lat='))
lat <- as.numeric(unlist(strsplit(aux1[2],'&'))[1])
return(lat)
}
tweet_get_longitude <- function(x){
aux2 <- unlist(strsplit(x$urls$expanded_url,'lng='))
lng <- as.numeric(unlist(strsplit(aux2[2],'&'))[1])
return(lng)
}
tweet_get_mon <- function(x){
month <- as.numeric(as.POSIXlt(x$created)$mon+1)
return(month)
}
tweet_get_day <- function(x){
day <- as.numeric(as.POSIXlt(x$created)$mday)
return(day)
}
tweet_get_year <- function(x){
year <- as.numeric(as.POSIXlt(x$created)$year+1900)
return(year)
}
tweet_get_color <- function(x){
aux <- unlist(strsplit(x$text,'nivel '))
color <- as.character(unlist(strsplit(aux[2],' '))[1])
if(is.na(color)){
color <- 'red'
}else if(color == 'ROJO'){
color <- 'orange'
}else if(color == 'AMARILLO'){
color <- 'yellow'
}else{
color <- 'red'
}
return(color)
}
tweet_get_dataTable <- function(x){
lat <- tweet_get_latitude(x[[1]])
lng <- tweet_get_longitude(x[[1]])
mon <- tweet_get_mon(x[[1]])
day <- tweet_get_day(x[[1]])
year <- tweet_get_year(x[[1]])
date <- paste0(year,"-", mon,"-", day)
color_ <- tweet_get_color(x[[1]])
datFrame <- as.data.frame(list(1, mon, lat, lng, color_, date))
colnames(datFrame) <- c("id", "mon","latitude","longitude", "color_", "date")
for(i in 2:length(x)){
if(length(x[[i]]$urls$expanded_url) > 0){
lat <- tweet_get_latitude(x[[i]])
lng <- tweet_get_longitude(x[[i]])
mon <- tweet_get_mon(x[[i]])
day <- tweet_get_day(x[[i]])
year <- tweet_get_year(x[[i]])
date <- paste0(year,"-", mon,"-", day)
color_ <- tweet_get_color(x[[i]])
if(!is.na(lat) &&  !is.na(lng) && !is.na(mon)){
dati <- as.data.frame(list(i, mon, lat, lng, color_, date))
colnames(dati) <- c("id", "mon","latitude","longitude", "color_","date")
datFrame <- rbind(datFrame, dati)
}
}
}
return (as.data.table(datFrame))
}
}
#Load packages
if (!(require("devtools", character.only=T, quietly=T))) {
install.packages("devtools")
library("devtools", character.only=T)
}
if (!(require("data.table", character.only=T, quietly=T))) {
install.packages("data.table")
library("data.table", character.only=T)
}
if (!(require("rgdal", character.only=T, quietly=T))) {
install.packages("rgdal")
library("rgdal", character.only=T)
}
if (!(require("sp", character.only=T, quietly=T))) {
install.packages("sp")
library("sp", character.only=T)
}
if (!(require("twitteR", character.only=T, quietly=T))) {
install.packages("twitteR")
library("twitteR", character.only=T)
}
if (!(require("ggplot2", character.only=T, quietly=T))) {
install.packages("ggplot2")
library("ggplot2", character.only=T)
}
#Authentication twitter variables
api_key <- "XXXXXM40dwRnETT"
api_secret <- "XXXXXXeQbx6dmR4kpUyZB"
access_token <- "XXXXX102146506-w01"
access_token_secret <- "XXXXXX6hFuJru7PBcisF2o4Fn"
#download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
#Authenticate in twitter
#Use direct authentication option
options(httr_oauth_cache=T)
result = tryCatch({
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
'OK'
}, error = function(e) {
'ERROR'
})
if(result != 'ERROR'){
searchQ <- "@InformacionDGT#RETENCIÓN"
tweets <- searchTwitteR(searchQ, n=2000, since ='2015-05-30')
}
if(result != 'ERROR'){
df.tweets <- twListToDF(tweets)
dt.tweets <- as.data.table(df.tweets)
}
df.tweets
#Load packages
if (!(require("devtools", character.only=T, quietly=T))) {
install.packages("devtools")
library("devtools", character.only=T)
}
if (!(require("data.table", character.only=T, quietly=T))) {
install.packages("data.table")
library("data.table", character.only=T)
}
if (!(require("rgdal", character.only=T, quietly=T))) {
install.packages("rgdal")
library("rgdal", character.only=T)
}
if (!(require("sp", character.only=T, quietly=T))) {
install.packages("sp")
library("sp", character.only=T)
}
if (!(require("twitteR", character.only=T, quietly=T))) {
install.packages("twitteR")
library("twitteR", character.only=T)
}
if (!(require("ggplot2", character.only=T, quietly=T))) {
install.packages("ggplot2")
library("ggplot2", character.only=T)
}
#Get data
URLBase <- "https://raw.githubusercontent.com/OscarLegat/UTAD/master/downloads/"
dirWorking <- getwd()
dirDataBase <- "datos_OscarUTAD"
dirPathDataBase = paste0(dirWorking, "/", dirDataBase)
destDirectoryESP_adm = paste0(dirPathDataBase, "/", "ESP_adm")
if (!file.exists(dirPathDataBase)){
dir.create(file.path(dirWorking, dirDataBase))
}
file <- paste0(URLBase,  "ESP_adm.zip")
destfileZip = paste0(dirPathDataBase,"/","ESP_adm.zip")
download.file(file, destfile = destfileZip,method = "curl", quiet = FALSE, mode = "w",cacheOK = TRUE,extra = getOption("download.file.extra"))
unzip(destfileZip, exdir=dirPathDataBase)
#Authentication twitter variables
api_key <- "XXXXXM40dwRnETT"
api_secret <- "XXXXXXeQbx6dmR4kpUyZB"
access_token <- "XXXXX102146506-w01"
access_token_secret <- "XXXXXX6hFuJru7PBcisF2o4Fn"
#download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
#Authenticate in twitter
#Use direct authentication option
options(httr_oauth_cache=T)
result = tryCatch({
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
'OK'
}, error = function(e) {
'ERROR'
})
if(result != 'ERROR'){
searchQ <- "@InformacionDGT#RETENCIÓN"
tweets <- searchTwitteR(searchQ, n=2000, since ='2015-05-25')
}
if(result != 'ERROR'){
df.tweets <- twListToDF(tweets)
dt.tweets <- as.data.table(df.tweets)
}
#Teewts parse functions
if(result != 'ERROR'){
#Teewts parse functions
tweet_get_latitude <- function(x){
aux1 <- unlist(strsplit(x$urls$expanded_url,'lat='))
lat <- as.numeric(unlist(strsplit(aux1[2],'&'))[1])
return(lat)
}
tweet_get_longitude <- function(x){
aux2 <- unlist(strsplit(x$urls$expanded_url,'lng='))
lng <- as.numeric(unlist(strsplit(aux2[2],'&'))[1])
return(lng)
}
tweet_get_mon <- function(x){
month <- as.numeric(as.POSIXlt(x$created)$mon+1)
return(month)
}
tweet_get_day <- function(x){
day <- as.numeric(as.POSIXlt(x$created)$mday)
return(day)
}
tweet_get_year <- function(x){
year <- as.numeric(as.POSIXlt(x$created)$year+1900)
return(year)
}
tweet_get_color <- function(x){
aux <- unlist(strsplit(x$text,'nivel '))
color <- as.character(unlist(strsplit(aux[2],' '))[1])
if(is.na(color)){
color <- 'red'
}else if(color == 'ROJO'){
color <- 'orange'
}else if(color == 'AMARILLO'){
color <- 'yellow'
}else{
color <- 'red'
}
return(color)
}
tweet_get_dataTable <- function(x){
lat <- tweet_get_latitude(x[[1]])
lng <- tweet_get_longitude(x[[1]])
mon <- tweet_get_mon(x[[1]])
day <- tweet_get_day(x[[1]])
year <- tweet_get_year(x[[1]])
date <- paste0(year,"-", mon,"-", day)
color_ <- tweet_get_color(x[[1]])
datFrame <- as.data.frame(list(1, mon, lat, lng, color_, date))
colnames(datFrame) <- c("id", "mon","latitude","longitude", "color_", "date")
for(i in 2:length(x)){
if(length(x[[i]]$urls$expanded_url) > 0){
lat <- tweet_get_latitude(x[[i]])
lng <- tweet_get_longitude(x[[i]])
mon <- tweet_get_mon(x[[i]])
day <- tweet_get_day(x[[i]])
year <- tweet_get_year(x[[i]])
date <- paste0(year,"-", mon,"-", day)
color_ <- tweet_get_color(x[[i]])
if(!is.na(lat) &&  !is.na(lng) && !is.na(mon)){
dati <- as.data.frame(list(i, mon, lat, lng, color_, date))
colnames(dati) <- c("id", "mon","latitude","longitude", "color_","date")
datFrame <- rbind(datFrame, dati)
}
}
}
return (as.data.table(datFrame))
}
}
#Load data points
counties<-readOGR(dsn = destDirectoryESP_adm, "ESP_adm1")
#Max Y Islas
ymax <- summary(counties[counties$NAME_1 == 'Islas Canarias',])$bbox[2,2] #y max
counties <- counties[counties$NAME_1 != 'Islas Canarias',]
proj4string(counties)
if(result != "ERROR"){
datatable <- tweet_get_dataTable(tweets)
write.csv(datatable, file = paste0(destDirectoryESP_adm,"/","tweets.csv"))
}else{
datatable <- as.data.table(fread(paste0(destDirectoryESP_adm,"/","tweets.csv")))
}
#write.csv(datatable, file = paste0(destDirectoryESP_adm,"/","tweets.csv"))
#datatable <- as.data.table(fread(paste0(destDirectoryESP_adm,"/","tweets.csv")))
mapdata <- copy(datatable)
coordinates(mapdata) <-  c("latitude", "longitude")
proj4string(mapdata)
proj4string(mapdata)<-CRS("+proj=longlat +datum=WGS84")
mapdata<-spTransform(mapdata, CRS(proj4string(counties)))
identical(proj4string(mapdata),proj4string(counties))
counties_fortify <- as.data.table(fortify(counties))
mapdata<-as.data.table(data.frame(mapdata))
names(mapdata)[names(mapdata)=="longitude"]<-"x"
names(mapdata)[names(mapdata)=="latitude"]<-"y"
mapdata <- mapdata[mapdata$y > ymax]
mapdata$color_ = factor(mapdata$color_)
#Plot1
plot <- ggplot() +
geom_path(data=counties_fortify, aes(x=long, y=lat, group=group), fill="grey40",
colour="black", alpha=1)+
labs(x="", y="", title="Evolución de \'Retenciones\' según Tweets de InfoDGT")+ #labels
theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text
axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text
plot.title = element_text(lineheight=.8, face="bold", vjust=1))+ # make title bold and add space
geom_point(aes(x=x, y=y, color=color_), data=mapdata, alpha=1, size=3, color="grey20")+# to get outline
geom_point(aes(x=x, y=y, color=color_), data=mapdata, alpha=1, size=2) +coord_equal(ratio=1) + facet_wrap(~date) +
scale_color_manual(name="Niveles de Retención",values = levels(mapdata$color_), labels = c("Retención Alta", "Corte", "Retención"))
print(plot)
library("adminpackage4r")
Required_Packages=c("reshape2", "weatherData","modeest", "fmsb", "GGally", "ggplot2", "data.table", "ggthemes", "hexbin", "RColorBrewer", "plyr", "treemap");
Install_And_Load(Required_Packages);
city1 <- "MAD"
city2 <- "GRU"
st <- as.Date ("2014-1-1")
en <- as.Date ("2014-12-31")
w2014_city1<-getWeatherForDate(station_id=city1, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
w2014_city2 <- getWeatherForDate(station_id=city2, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
w2014_city1<- as.data.frame(w2014_city1)
w2014_city2<- as.data.frame(w2014_city2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
w2014_city1<- as.data.frame(w2014_city1)
w2014_city2<- as.data.frame(w2014_city2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
temp2<-cbind(w2014_city2,city)
w2014<-rbind(temp1,temp2)
```
ggplot(w2014, aes(Date, Mean_Humidity)) +
geom_point() + xlab("") + ylab("Mean Temp deg C") +
ggtitle("2014 HUMEDAD RELATIVA MEDIA") +
layer(stat="smooth") +
facet_grid(city~.,scales="free_y") +
stat_smooth(method="loess", se=F, colour="red",size=1) +
theme_wsj() +
scale_colour_wsj()
city1 <- "MAD"
city2 <- "GRU"
st <- as.Date ("2014-1-1")
en <- as.Date ("2014-12-31")
w2014_city1<-getWeatherForDate(station_id=city1, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
city1 <- "MAD"
city2 <- "SAO"
st <- as.Date ("2014-1-1")
en <- as.Date ("2014-12-31")
w2014_city1<-getWeatherForDate(station_id=city1, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
w2014_city2 <- getWeatherForDate(station_id=city2, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
city2 <- "GRU"
w2014_city2 <- getWeatherForDate(station_id=city2, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
w2014_city1<- as.data.frame(w2014_city1)
w2014_city2<- as.data.frame(w2014_city2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
w2014<-rbind(temp1,temp2)
w2014_city1<- as.data.frame(w2014_city1)
w2014_city2<- as.data.frame(w2014_city2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
w2014<-rbind(temp1,temp2)
w2014<-rbind(temp1,temp2)
w2014<-rbind(temp1,temp2)
w2014<-rbind(temp1,temp2)
w2014<-rbind(temp1,temp2)
w2014<-rbind(temp1,temp2)
rm(list = ls())
library("adminpackage4r")
Required_Packages=c("reshape2", "weatherData","modeest", "fmsb", "GGally", "ggplot2", "data.table", "ggthemes", "hexbin", "RColorBrewer", "plyr", "treemap");
# Call the Function
Install_And_Load(Required_Packages);
#library(weatherData)
#library(data.table)
#library(ggthemes)
#library(ggplot2)
#library(reshape2)
city1 <- "MAD"
city2 <- "GRU"
st <- as.Date ("2014-1-1")
en <- as.Date ("2014-12-31")
w2014_city1<-getWeatherForDate(station_id=city1, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
head(w2014_city1)
w2014_city2 <- getWeatherForDate(station_id=city2, start_date=st, end_date = en,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = TRUE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
head(w2014_city2)
w2014_city1<- as.data.frame(w2014_city1)
w2014_city2<- as.data.frame(w2014_city2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
w2014<-rbind(temp1,temp2)
temp1 <- unname(temp1)
temp1 <- unname(temp1)
temp2 <- unname(temp2)
w2014<-rbind(temp1,temp2)
city<-rep(city1,365)
temp1<-cbind(w2014_city1,city)
city<-rep(city2,365)
temp2<-cbind(w2014_city2,city)
w2014<-rbind(temp1,temp2)
w2014 <- rbind(temp1,temp2)
w2014_city1 <- as.data.frame(w2014_city1)
w2014_city2 <- as.data.frame(w2014_city2)
city <- rep(city1,365)
temp1 <- cbind(w2014_city1,city)
city <- rep(city2,365)
temp2 <- cbind(w2014_city2,city)
temp1 <- unname(temp1)
temp2 <- unname(temp2)
w2014 <- rbind(temp1,temp2)
w2014_city1 <- as.data.frame(w2014_city1)
w2014_city2 <- as.data.frame(w2014_city2)
city <- rep(city1,365)
temp1 <- cbind(w2014_city1,city)
city <- rep(city2,365)
temp2 <- cbind(w2014_city2,city)
w2014 <- rbind(temp1,temp2)
w2014_city1 <- as.data.frame(w2014_city1)
w2014_city2 <- as.data.frame(w2014_city2)
city <- rep(city1,365)
temp1 <- cbind(w2014_city1,city)
city <- rep(city2,365)
temp2 <- cbind(w2014_city2,city)
temp1 <- unname(temp1)
temp2 <- unname(temp2)
w2014 <- rbind(temp1,temp2)
w2014_city1 <- as.data.frame(w2014_city1)
w2014_city2 <- as.data.frame(w2014_city2)
city <- rep(city1,365)
temp1 <- cbind(w2014_city1,city)
city <- rep(city2,365)
temp2 <- cbind(w2014_city2,city)
unname(temp1)
unname(temp2)
w2014 <- rbind(temp1,temp2)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd=0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each= 4), sd=0.2)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y 0.05, labels = as.character(1:12))
library(randomForest)
setwd("~/git/github.com/KaggleCompetitionsCourse/kaggle/GiveMeSomeCredit")
input.folder <- "~/git/github.com/KaggleCompetitionsCourse/kaggle/GiveMeSomeCredit/"
train.data <- read.csv(paste0(input.folder, "data/cs-training.csv")
train.data <- read.csv(paste0(input.folder, "data/cs-training.csv"))
input.folder <- "~/git/github.com/KaggleCompetitionsCourse/kaggle/GiveMeSomeCredit/"
train.data <- read.csv(paste0(input.folder, "data/cs-training.csv"))
test.data <- read.csv(paste0(input.folder, "data/cs-test.csv"))
submissision <- read.csv(paste0(input.folder, "data/sampleEntry.csv"))
train.data$SeriousDlqin2yrs <- as.factor(train.data$SeriousDlqin2yrs)
table(train.data$SeriousDlqin2yrs)
prop.table(table(train.data$SeriousDlqin2yrs))
train.class <- train.data[["SeriousDlqin2yrs"]]
train.data[is.na(train.data[,12]), 12] <- 0
train.data[is.na(train.data[,"MonthlyIncome"]), "MonthlyIncome"] <-  5209
test.data[is.na(test.data[,12]), 12] <- 0
test.data[is.na(test.data[,"MonthlyIncome"]), "MonthlyIncome"] <-  5209
#
# Entrenamos un modelo
rf.model.1 <- randomForest(train.data[, 3:12], y = train.class,
method = "class",
ntree = 500)
rf.model.1
pred.rf <- predict(rf.model.1, test.data[, 3:12], type = "prob")
write.table(pred.rf[,1], file = paste0(input.folder, "result/sample.submission.1.csv"), quote = F, sep = "," )
write.table(pred.rf[,1], file = "sample.submission.1.csv", quote = F, sep = "," )
library(pRoc)
install.packages("pROC")
library(pRoc)
library(pROC)
rf.model.1 <- randomForest(train.data[1:16000, 3:12], y = train.class,
method = "class",
ntree = 500)
rf.model.1
rf.model.1 <- randomForest(train.data[1:16000, 3:12], y = train.class,
method = "class",
ntree = 500, do.trace = T)
rf.model.1
rf.model.1 <- randomForest(train.data[1:16000, 3:12], y = train.class,
method = "class",
ntree = 500, do.trace = T)
rf.model.1 <- randomForest(train.data[1:16000, 3:12], y = train.class,
method = "class",
ntree = 500, do.trace = T)
rm(list = ls())
